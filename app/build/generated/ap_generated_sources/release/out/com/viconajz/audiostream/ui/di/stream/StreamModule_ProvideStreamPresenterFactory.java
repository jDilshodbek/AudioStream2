// Generated by Dagger (https://google.github.io/dagger).
package com.viconajz.audiostream.ui.di.stream;

import com.viconajz.audiostream.api.AudioApi;
import com.viconajz.audiostream.ui.fragments.stream.IStreamContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class StreamModule_ProvideStreamPresenterFactory
    implements Factory<IStreamContract.Presenter> {
  private final StreamModule module;

  private final Provider<AudioApi> audioApiProvider;

  public StreamModule_ProvideStreamPresenterFactory(
      StreamModule module, Provider<AudioApi> audioApiProvider) {
    this.module = module;
    this.audioApiProvider = audioApiProvider;
  }

  @Override
  public IStreamContract.Presenter get() {
    return provideInstance(module, audioApiProvider);
  }

  public static IStreamContract.Presenter provideInstance(
      StreamModule module, Provider<AudioApi> audioApiProvider) {
    return proxyProvideStreamPresenter(module, audioApiProvider.get());
  }

  public static StreamModule_ProvideStreamPresenterFactory create(
      StreamModule module, Provider<AudioApi> audioApiProvider) {
    return new StreamModule_ProvideStreamPresenterFactory(module, audioApiProvider);
  }

  public static IStreamContract.Presenter proxyProvideStreamPresenter(
      StreamModule instance, AudioApi audioApi) {
    return Preconditions.checkNotNull(
        instance.provideStreamPresenter(audioApi),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
