// Generated by Dagger (https://google.github.io/dagger).
package com.viconajz.audiostream.ui.di.main;

import com.viconajz.audiostream.api.AudioApi;
import com.viconajz.audiostream.ui.fragments.main.IMainContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainModule_ProvideMainPresenterFactory
    implements Factory<IMainContract.Presenter> {
  private final MainModule module;

  private final Provider<AudioApi> audioApiProvider;

  public MainModule_ProvideMainPresenterFactory(
      MainModule module, Provider<AudioApi> audioApiProvider) {
    this.module = module;
    this.audioApiProvider = audioApiProvider;
  }

  @Override
  public IMainContract.Presenter get() {
    return provideInstance(module, audioApiProvider);
  }

  public static IMainContract.Presenter provideInstance(
      MainModule module, Provider<AudioApi> audioApiProvider) {
    return proxyProvideMainPresenter(module, audioApiProvider.get());
  }

  public static MainModule_ProvideMainPresenterFactory create(
      MainModule module, Provider<AudioApi> audioApiProvider) {
    return new MainModule_ProvideMainPresenterFactory(module, audioApiProvider);
  }

  public static IMainContract.Presenter proxyProvideMainPresenter(
      MainModule instance, AudioApi audioApi) {
    return Preconditions.checkNotNull(
        instance.provideMainPresenter(audioApi),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
