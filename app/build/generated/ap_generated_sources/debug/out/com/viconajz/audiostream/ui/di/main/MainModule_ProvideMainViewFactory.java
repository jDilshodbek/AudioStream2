// Generated by Dagger (https://google.github.io/dagger).
package com.viconajz.audiostream.ui.di.main;

import com.viconajz.audiostream.ui.fragments.main.IMainContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class MainModule_ProvideMainViewFactory implements Factory<IMainContract.View> {
  private final MainModule module;

  public MainModule_ProvideMainViewFactory(MainModule module) {
    this.module = module;
  }

  @Override
  public IMainContract.View get() {
    return provideInstance(module);
  }

  public static IMainContract.View provideInstance(MainModule module) {
    return proxyProvideMainView(module);
  }

  public static MainModule_ProvideMainViewFactory create(MainModule module) {
    return new MainModule_ProvideMainViewFactory(module);
  }

  public static IMainContract.View proxyProvideMainView(MainModule instance) {
    return Preconditions.checkNotNull(
        instance.provideMainView(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
